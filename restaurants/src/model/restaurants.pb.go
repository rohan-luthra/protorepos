// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/restaurants.proto

package restaurants

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionPlan int32

const (
	SubscriptionPlan_MONTHLY     SubscriptionPlan = 0
	SubscriptionPlan_QUATERLY    SubscriptionPlan = 1
	SubscriptionPlan_HALF_YEARLY SubscriptionPlan = 2
	SubscriptionPlan_YEARLY      SubscriptionPlan = 3
)

var SubscriptionPlan_name = map[int32]string{
	0: "MONTHLY",
	1: "QUATERLY",
	2: "HALF_YEARLY",
	3: "YEARLY",
}

var SubscriptionPlan_value = map[string]int32{
	"MONTHLY":     0,
	"QUATERLY":    1,
	"HALF_YEARLY": 2,
	"YEARLY":      3,
}

func (x SubscriptionPlan) String() string {
	return proto.EnumName(SubscriptionPlan_name, int32(x))
}

func (SubscriptionPlan) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{0}
}

type PaymentModes int32

const (
	PaymentModes_CASH   PaymentModes = 0
	PaymentModes_CARD   PaymentModes = 1
	PaymentModes_ONLINE PaymentModes = 2
	PaymentModes_WALLET PaymentModes = 3
)

var PaymentModes_name = map[int32]string{
	0: "CASH",
	1: "CARD",
	2: "ONLINE",
	3: "WALLET",
}

var PaymentModes_value = map[string]int32{
	"CASH":   0,
	"CARD":   1,
	"ONLINE": 2,
	"WALLET": 3,
}

func (x PaymentModes) String() string {
	return proto.EnumName(PaymentModes_name, int32(x))
}

func (PaymentModes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{1}
}

type Days int32

const (
	Days_MONDAY    Days = 0
	Days_TUESDAY   Days = 1
	Days_WEDNESDAY Days = 2
	Days_THURSDAY  Days = 3
	Days_FRIDAY    Days = 4
	Days_SATURDAY  Days = 5
	Days_SUNDAY    Days = 6
)

var Days_name = map[int32]string{
	0: "MONDAY",
	1: "TUESDAY",
	2: "WEDNESDAY",
	3: "THURSDAY",
	4: "FRIDAY",
	5: "SATURDAY",
	6: "SUNDAY",
}

var Days_value = map[string]int32{
	"MONDAY":    0,
	"TUESDAY":   1,
	"WEDNESDAY": 2,
	"THURSDAY":  3,
	"FRIDAY":    4,
	"SATURDAY":  5,
	"SUNDAY":    6,
}

func (x Days) String() string {
	return proto.EnumName(Days_name, int32(x))
}

func (Days) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{2}
}

type Payment struct {
	GSTIN                string   `protobuf:"bytes,1,opt,name=GSTIN,proto3" json:"GSTIN,omitempty"`
	PAN                  string   `protobuf:"bytes,2,opt,name=PAN,proto3" json:"PAN,omitempty"`
	UPI                  string   `protobuf:"bytes,3,opt,name=UPI,proto3" json:"UPI,omitempty"`
	BankName             string   `protobuf:"bytes,4,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	AccountName          string   `protobuf:"bytes,5,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountNumber        string   `protobuf:"bytes,6,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	IFSC                 string   `protobuf:"bytes,7,opt,name=IFSC,proto3" json:"IFSC,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{0}
}

func (m *Payment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payment.Unmarshal(m, b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return xxx_messageInfo_Payment.Size(m)
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetGSTIN() string {
	if m != nil {
		return m.GSTIN
	}
	return ""
}

func (m *Payment) GetPAN() string {
	if m != nil {
		return m.PAN
	}
	return ""
}

func (m *Payment) GetUPI() string {
	if m != nil {
		return m.UPI
	}
	return ""
}

func (m *Payment) GetBankName() string {
	if m != nil {
		return m.BankName
	}
	return ""
}

func (m *Payment) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Payment) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *Payment) GetIFSC() string {
	if m != nil {
		return m.IFSC
	}
	return ""
}

type Slots struct {
	StartTime            int32    `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int32    `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Slots) Reset()         { *m = Slots{} }
func (m *Slots) String() string { return proto.CompactTextString(m) }
func (*Slots) ProtoMessage()    {}
func (*Slots) Descriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{1}
}

func (m *Slots) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slots.Unmarshal(m, b)
}
func (m *Slots) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slots.Marshal(b, m, deterministic)
}
func (m *Slots) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slots.Merge(m, src)
}
func (m *Slots) XXX_Size() int {
	return xxx_messageInfo_Slots.Size(m)
}
func (m *Slots) XXX_DiscardUnknown() {
	xxx_messageInfo_Slots.DiscardUnknown(m)
}

var xxx_messageInfo_Slots proto.InternalMessageInfo

func (m *Slots) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Slots) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type Timings struct {
	Day                  Days     `protobuf:"varint,1,opt,name=day,proto3,enum=restaurants.Days" json:"day,omitempty"`
	Slots                []*Slots `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timings) Reset()         { *m = Timings{} }
func (m *Timings) String() string { return proto.CompactTextString(m) }
func (*Timings) ProtoMessage()    {}
func (*Timings) Descriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{2}
}

func (m *Timings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timings.Unmarshal(m, b)
}
func (m *Timings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timings.Marshal(b, m, deterministic)
}
func (m *Timings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timings.Merge(m, src)
}
func (m *Timings) XXX_Size() int {
	return xxx_messageInfo_Timings.Size(m)
}
func (m *Timings) XXX_DiscardUnknown() {
	xxx_messageInfo_Timings.DiscardUnknown(m)
}

var xxx_messageInfo_Timings proto.InternalMessageInfo

func (m *Timings) GetDay() Days {
	if m != nil {
		return m.Day
	}
	return Days_MONDAY
}

func (m *Timings) GetSlots() []*Slots {
	if m != nil {
		return m.Slots
	}
	return nil
}

type Currency struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Currency) Reset()         { *m = Currency{} }
func (m *Currency) String() string { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()    {}
func (*Currency) Descriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{3}
}

func (m *Currency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Currency.Unmarshal(m, b)
}
func (m *Currency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Currency.Marshal(b, m, deterministic)
}
func (m *Currency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Currency.Merge(m, src)
}
func (m *Currency) XXX_Size() int {
	return xxx_messageInfo_Currency.Size(m)
}
func (m *Currency) XXX_DiscardUnknown() {
	xxx_messageInfo_Currency.DiscardUnknown(m)
}

var xxx_messageInfo_Currency proto.InternalMessageInfo

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type Address struct {
	Line1                string   `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2                string   `protobuf:"bytes,2,opt,name=line2,proto3" json:"line2,omitempty"`
	City                 string   `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	State                string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Country              string   `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Pincode              int32    `protobuf:"varint,6,opt,name=pincode,proto3" json:"pincode,omitempty"`
	GeoLatitude          float32  `protobuf:"fixed32,7,opt,name=geo_latitude,json=geoLatitude,proto3" json:"geo_latitude,omitempty"`
	GeoLongitude         float32  `protobuf:"fixed32,8,opt,name=geo_longitude,json=geoLongitude,proto3" json:"geo_longitude,omitempty"`
	Timezone             string   `protobuf:"bytes,9,opt,name=timezone,proto3" json:"timezone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{4}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetLine1() string {
	if m != nil {
		return m.Line1
	}
	return ""
}

func (m *Address) GetLine2() string {
	if m != nil {
		return m.Line2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetPincode() int32 {
	if m != nil {
		return m.Pincode
	}
	return 0
}

func (m *Address) GetGeoLatitude() float32 {
	if m != nil {
		return m.GeoLatitude
	}
	return 0
}

func (m *Address) GetGeoLongitude() float32 {
	if m != nil {
		return m.GeoLongitude
	}
	return 0
}

func (m *Address) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

type Restaurant struct {
	XId                  string           `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username             string           `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Hashword             string           `protobuf:"bytes,4,opt,name=hashword,proto3" json:"hashword,omitempty"`
	HashwordSalt         string           `protobuf:"bytes,5,opt,name=hashword_salt,json=hashwordSalt,proto3" json:"hashword_salt,omitempty"`
	Address              *Address         `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	ContactNumber        string           `protobuf:"bytes,7,opt,name=contact_number,json=contactNumber,proto3" json:"contact_number,omitempty"`
	PersonOfContact      string           `protobuf:"bytes,8,opt,name=person_of_contact,json=personOfContact,proto3" json:"person_of_contact,omitempty"`
	Logo                 string           `protobuf:"bytes,9,opt,name=logo,proto3" json:"logo,omitempty"`
	ProfileImage         string           `protobuf:"bytes,10,opt,name=profile_image,json=profileImage,proto3" json:"profile_image,omitempty"`
	Images               []string         `protobuf:"bytes,11,rep,name=images,proto3" json:"images,omitempty"`
	FcmTokens            []string         `protobuf:"bytes,12,rep,name=fcm_tokens,json=fcmTokens,proto3" json:"fcm_tokens,omitempty"`
	Active               bool             `protobuf:"varint,13,opt,name=active,proto3" json:"active,omitempty"`
	Taxes                []*Tax           `protobuf:"bytes,14,rep,name=taxes,proto3" json:"taxes,omitempty"`
	PaymentMode          []PaymentModes   `protobuf:"varint,15,rep,packed,name=payment_mode,json=paymentMode,proto3,enum=restaurants.PaymentModes" json:"payment_mode,omitempty"`
	Timings              []*Timings       `protobuf:"bytes,16,rep,name=timings,proto3" json:"timings,omitempty"`
	SubscriptionPlan     SubscriptionPlan `protobuf:"varint,17,opt,name=subscription_plan,json=subscriptionPlan,proto3,enum=restaurants.SubscriptionPlan" json:"subscription_plan,omitempty"`
	SubscriptionPrice    float32          `protobuf:"fixed32,18,opt,name=subscription_price,json=subscriptionPrice,proto3" json:"subscription_price,omitempty"`
	DefaultCurrenyId     string           `protobuf:"bytes,19,opt,name=default_curreny_id,json=defaultCurrenyId,proto3" json:"default_curreny_id,omitempty"`
	AssignedSalesEmpId   string           `protobuf:"bytes,20,opt,name=assigned_sales_emp_id,json=assignedSalesEmpId,proto3" json:"assigned_sales_emp_id,omitempty"`
	AssignedOpsEmpId     string           `protobuf:"bytes,21,opt,name=assigned_ops_emp_id,json=assignedOpsEmpId,proto3" json:"assigned_ops_emp_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Restaurant) Reset()         { *m = Restaurant{} }
func (m *Restaurant) String() string { return proto.CompactTextString(m) }
func (*Restaurant) ProtoMessage()    {}
func (*Restaurant) Descriptor() ([]byte, []int) {
	return fileDescriptor_d282ef766bb01f4c, []int{5}
}

func (m *Restaurant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Restaurant.Unmarshal(m, b)
}
func (m *Restaurant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Restaurant.Marshal(b, m, deterministic)
}
func (m *Restaurant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Restaurant.Merge(m, src)
}
func (m *Restaurant) XXX_Size() int {
	return xxx_messageInfo_Restaurant.Size(m)
}
func (m *Restaurant) XXX_DiscardUnknown() {
	xxx_messageInfo_Restaurant.DiscardUnknown(m)
}

var xxx_messageInfo_Restaurant proto.InternalMessageInfo

func (m *Restaurant) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *Restaurant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Restaurant) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Restaurant) GetHashword() string {
	if m != nil {
		return m.Hashword
	}
	return ""
}

func (m *Restaurant) GetHashwordSalt() string {
	if m != nil {
		return m.HashwordSalt
	}
	return ""
}

func (m *Restaurant) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Restaurant) GetContactNumber() string {
	if m != nil {
		return m.ContactNumber
	}
	return ""
}

func (m *Restaurant) GetPersonOfContact() string {
	if m != nil {
		return m.PersonOfContact
	}
	return ""
}

func (m *Restaurant) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Restaurant) GetProfileImage() string {
	if m != nil {
		return m.ProfileImage
	}
	return ""
}

func (m *Restaurant) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Restaurant) GetFcmTokens() []string {
	if m != nil {
		return m.FcmTokens
	}
	return nil
}

func (m *Restaurant) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Restaurant) GetTaxes() []*Tax {
	if m != nil {
		return m.Taxes
	}
	return nil
}

func (m *Restaurant) GetPaymentMode() []PaymentModes {
	if m != nil {
		return m.PaymentMode
	}
	return nil
}

func (m *Restaurant) GetTimings() []*Timings {
	if m != nil {
		return m.Timings
	}
	return nil
}

func (m *Restaurant) GetSubscriptionPlan() SubscriptionPlan {
	if m != nil {
		return m.SubscriptionPlan
	}
	return SubscriptionPlan_MONTHLY
}

func (m *Restaurant) GetSubscriptionPrice() float32 {
	if m != nil {
		return m.SubscriptionPrice
	}
	return 0
}

func (m *Restaurant) GetDefaultCurrenyId() string {
	if m != nil {
		return m.DefaultCurrenyId
	}
	return ""
}

func (m *Restaurant) GetAssignedSalesEmpId() string {
	if m != nil {
		return m.AssignedSalesEmpId
	}
	return ""
}

func (m *Restaurant) GetAssignedOpsEmpId() string {
	if m != nil {
		return m.AssignedOpsEmpId
	}
	return ""
}

func init() {
	proto.RegisterEnum("restaurants.SubscriptionPlan", SubscriptionPlan_name, SubscriptionPlan_value)
	proto.RegisterEnum("restaurants.PaymentModes", PaymentModes_name, PaymentModes_value)
	proto.RegisterEnum("restaurants.Days", Days_name, Days_value)
	proto.RegisterType((*Payment)(nil), "restaurants.Payment")
	proto.RegisterType((*Slots)(nil), "restaurants.Slots")
	proto.RegisterType((*Timings)(nil), "restaurants.Timings")
	proto.RegisterType((*Currency)(nil), "restaurants.Currency")
	proto.RegisterType((*Address)(nil), "restaurants.Address")
	proto.RegisterType((*Restaurant)(nil), "restaurants.Restaurant")
}

func init() {
	proto.RegisterFile("src/proto/restaurants.proto", fileDescriptor_d282ef766bb01f4c)
}

var fileDescriptor_d282ef766bb01f4c = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x55, 0x4b, 0x6f, 0xdb, 0xc6,
	0x13, 0x8f, 0x24, 0xeb, 0x35, 0x92, 0x6d, 0x7a, 0xed, 0xfc, 0xc1, 0x38, 0x08, 0xe0, 0xbf, 0x82,
	0x16, 0x86, 0xd1, 0x38, 0x88, 0x0b, 0xf4, 0x50, 0xf4, 0x22, 0xd8, 0x72, 0xcd, 0x40, 0x96, 0x55,
	0x8a, 0x42, 0xea, 0x13, 0xb1, 0x22, 0x57, 0x0a, 0x11, 0x92, 0x4b, 0x70, 0x57, 0xad, 0xd5, 0x8f,
	0xd6, 0x43, 0xbf, 0x56, 0xaf, 0xc5, 0xcc, 0x2e, 0x15, 0x2b, 0xb7, 0xf9, 0x3d, 0x46, 0xbb, 0x3b,
	0x0f, 0x0a, 0x5e, 0xab, 0x32, 0x7a, 0x5f, 0x94, 0x52, 0xcb, 0xf7, 0xa5, 0x50, 0x9a, 0xaf, 0x4b,
	0x9e, 0x6b, 0x75, 0x49, 0x0c, 0xeb, 0x3d, 0xa3, 0x4e, 0x8f, 0xbf, 0x3a, 0x35, 0x7f, 0x32, 0x8e,
	0xc1, 0x3f, 0x35, 0x68, 0x4f, 0xf9, 0x26, 0x13, 0xb9, 0x66, 0x27, 0xd0, 0xfc, 0x75, 0x16, 0x78,
	0x13, 0xb7, 0x76, 0x56, 0x3b, 0xef, 0xfa, 0x06, 0x30, 0x07, 0x1a, 0xd3, 0xe1, 0xc4, 0xad, 0x13,
	0x87, 0x21, 0x32, 0xf3, 0xa9, 0xe7, 0x36, 0x0c, 0x33, 0x9f, 0x7a, 0xec, 0x35, 0x74, 0x17, 0x3c,
	0xff, 0x12, 0xe6, 0x3c, 0x13, 0xee, 0x1e, 0xf1, 0x1d, 0x24, 0x26, 0x3c, 0x13, 0xec, 0xff, 0xd0,
	0xe7, 0x51, 0x24, 0xd7, 0xb9, 0x36, 0x7a, 0x93, 0xf4, 0x9e, 0xe5, 0xc8, 0xf2, 0x1d, 0x1c, 0x6c,
	0x2d, 0xeb, 0x6c, 0x21, 0x4a, 0xb7, 0x45, 0xa6, 0xfd, 0xca, 0x44, 0x24, 0x63, 0xb0, 0xe7, 0xdd,
	0xce, 0xae, 0xdd, 0x36, 0x89, 0x14, 0x0f, 0x86, 0xd0, 0x9c, 0xa5, 0x52, 0x2b, 0xf6, 0x06, 0x40,
	0x69, 0x5e, 0xea, 0x50, 0x27, 0x99, 0xa0, 0x27, 0x34, 0xfd, 0x2e, 0x31, 0x41, 0x92, 0x09, 0xf6,
	0x0a, 0x3a, 0x22, 0x8f, 0x8d, 0x58, 0x27, 0xb1, 0x2d, 0xf2, 0x18, 0xa5, 0xc1, 0xef, 0xd0, 0x0e,
	0x92, 0x2c, 0xc9, 0x57, 0x8a, 0xbd, 0x85, 0x46, 0xcc, 0x37, 0x94, 0x7d, 0x70, 0x75, 0x74, 0xf9,
	0xbc, 0xa2, 0x37, 0x7c, 0xa3, 0x7c, 0x54, 0xd9, 0x39, 0x34, 0x15, 0x1e, 0xe9, 0xd6, 0xcf, 0x1a,
	0xe7, 0xbd, 0x2b, 0xb6, 0x63, 0xa3, 0xcb, 0xf8, 0xc6, 0x30, 0xf8, 0x09, 0x3a, 0xd7, 0xeb, 0xb2,
	0x14, 0x79, 0xb4, 0xc1, 0xcb, 0xd3, 0xf3, 0x4d, 0x71, 0x29, 0x66, 0xff, 0x83, 0x96, 0xda, 0x64,
	0x0b, 0x99, 0xda, 0xf2, 0x5a, 0x34, 0xf8, 0xb7, 0x06, 0xed, 0x61, 0x1c, 0x97, 0x42, 0x29, 0xec,
	0x4a, 0x9a, 0xe4, 0xe2, 0x43, 0xd5, 0x15, 0x02, 0x15, 0x7b, 0x65, 0x13, 0x0d, 0xc0, 0x33, 0xa2,
	0x44, 0x6f, 0x6c, 0x6b, 0x28, 0x46, 0xa7, 0xd2, 0x5c, 0x57, 0x7d, 0x31, 0x80, 0xb9, 0xd0, 0xa6,
	0xca, 0x96, 0x1b, 0xdb, 0x8f, 0x0a, 0xa2, 0x52, 0x24, 0x79, 0x24, 0x63, 0x41, 0x4d, 0x68, 0xfa,
	0x15, 0xc4, 0x46, 0xae, 0x84, 0x0c, 0x53, 0xae, 0x13, 0xbd, 0x8e, 0x05, 0xb5, 0xa1, 0xee, 0xf7,
	0x56, 0x42, 0x8e, 0x2d, 0xc5, 0xde, 0xc2, 0x3e, 0x59, 0x64, 0xbe, 0x32, 0x9e, 0x0e, 0x79, 0x30,
	0x6f, 0x5c, 0x71, 0xec, 0x14, 0x3a, 0xd8, 0x86, 0xbf, 0x64, 0x2e, 0xdc, 0xae, 0x19, 0x96, 0x0a,
	0x0f, 0xfe, 0x6e, 0x01, 0xf8, 0xdb, 0x72, 0xb2, 0x43, 0x68, 0x84, 0x49, 0x6c, 0x9f, 0x5e, 0xf7,
	0xe2, 0x6d, 0x15, 0xeb, 0xcf, 0xaa, 0x78, 0x0a, 0x9d, 0xb5, 0x12, 0x25, 0xf1, 0xe6, 0xe5, 0x5b,
	0x8c, 0xda, 0x67, 0xae, 0x3e, 0xff, 0x29, 0xcb, 0xb8, 0x1a, 0xcc, 0x0a, 0xe3, 0x65, 0xab, 0x38,
	0x54, 0x3c, 0xd5, 0xb6, 0x12, 0xfd, 0x8a, 0x9c, 0xf1, 0x54, 0xb3, 0x4b, 0x68, 0x73, 0xd3, 0x09,
	0x2a, 0x47, 0xef, 0xea, 0x64, 0xa7, 0xdd, 0xb6, 0x4b, 0x7e, 0x65, 0xc2, 0x51, 0x8e, 0x64, 0xae,
	0x79, 0xb4, 0x1d, 0x65, 0x33, 0xad, 0xfb, 0x96, 0xb5, 0xa3, 0x7c, 0x01, 0x47, 0x85, 0x28, 0x95,
	0xcc, 0x43, 0xb9, 0x0c, 0xad, 0x44, 0xc5, 0xea, 0xfa, 0x87, 0x46, 0x78, 0x58, 0x5e, 0x1b, 0x1a,
	0xdf, 0x9c, 0xca, 0x95, 0xb4, 0xb5, 0xa2, 0x18, 0xef, 0x5e, 0x94, 0x72, 0x99, 0xa4, 0x22, 0x4c,
	0x32, 0xbe, 0x12, 0x2e, 0x98, 0xbb, 0x5b, 0xd2, 0x43, 0x0e, 0xc7, 0x8b, 0x44, 0xe5, 0xf6, 0xce,
	0x1a, 0x38, 0x5e, 0x06, 0xe1, 0xaa, 0x2c, 0xa3, 0x2c, 0xd4, 0xf2, 0x8b, 0xc8, 0x95, 0xdb, 0x27,
	0xad, 0xbb, 0x8c, 0xb2, 0x80, 0x08, 0x4c, 0xe3, 0x91, 0x4e, 0xfe, 0x10, 0xee, 0xfe, 0x59, 0xed,
	0xbc, 0xe3, 0x5b, 0xc4, 0xbe, 0x87, 0xa6, 0xe6, 0x4f, 0x42, 0xb9, 0x07, 0x34, 0xf7, 0xce, 0x4e,
	0x21, 0x02, 0xfe, 0xe4, 0x1b, 0x99, 0xfd, 0x02, 0xfd, 0xc2, 0x7c, 0x52, 0xc2, 0x0c, 0xc7, 0xe8,
	0xf0, 0xac, 0x71, 0x7e, 0x70, 0xf5, 0x6a, 0xc7, 0x6e, 0xbf, 0x39, 0xf7, 0x32, 0x16, 0xca, 0xef,
	0x15, 0x5f, 0x11, 0x16, 0x5c, 0x9b, 0x6d, 0x74, 0x1d, 0x3a, 0x67, 0xb7, 0xe0, 0x76, 0x53, 0xfd,
	0xca, 0xc4, 0x3e, 0xc2, 0x91, 0x5a, 0x2f, 0x54, 0x54, 0x26, 0x85, 0x4e, 0x64, 0x1e, 0x16, 0x29,
	0xcf, 0xdd, 0x23, 0x5a, 0xe0, 0x37, 0xbb, 0x9b, 0xf9, 0xcc, 0x35, 0x4d, 0x79, 0xee, 0x3b, 0xea,
	0x1b, 0x86, 0xbd, 0x03, 0xb6, 0xfb, 0x5b, 0x65, 0x12, 0x09, 0x97, 0xd1, 0x0c, 0xef, 0x9c, 0x32,
	0x45, 0x81, 0xfd, 0x00, 0x2c, 0x16, 0x4b, 0xbe, 0x4e, 0x75, 0x18, 0xd1, 0x9a, 0x6f, 0x70, 0x58,
	0x8f, 0xa9, 0x13, 0x8e, 0x55, 0xcc, 0xfe, 0x6f, 0xbc, 0x98, 0x7d, 0x80, 0x97, 0x5c, 0xa9, 0x64,
	0x95, 0x0b, 0x1a, 0x37, 0xa1, 0x42, 0x91, 0x15, 0x98, 0x70, 0x42, 0x09, 0xac, 0x12, 0x67, 0xa8,
	0x8d, 0xb2, 0xc2, 0x8b, 0xd9, 0x3b, 0x38, 0xde, 0xa6, 0xc8, 0x62, 0x9b, 0xf0, 0xd2, 0x9c, 0x50,
	0x49, 0x0f, 0x85, 0xb1, 0x5f, 0x7c, 0x04, 0xe7, 0xdb, 0x47, 0xb2, 0x1e, 0xb4, 0xef, 0x1f, 0x26,
	0xc1, 0xdd, 0xf8, 0xd1, 0x79, 0xc1, 0xfa, 0xd0, 0xf9, 0x6d, 0x3e, 0x0c, 0x46, 0xfe, 0xf8, 0xd1,
	0xa9, 0xb1, 0x43, 0xe8, 0xdd, 0x0d, 0xc7, 0xb7, 0xe1, 0xe3, 0x68, 0x88, 0x44, 0x9d, 0x01, 0xb4,
	0x6c, 0xdc, 0xb8, 0xf8, 0x19, 0xfa, 0xcf, 0x7b, 0xc4, 0x3a, 0xb0, 0x77, 0x3d, 0x9c, 0xdd, 0x39,
	0x2f, 0x4c, 0xe4, 0xdf, 0x38, 0x35, 0xf4, 0x3f, 0x4c, 0xc6, 0xde, 0x64, 0x64, 0x72, 0x3f, 0x0d,
	0xc7, 0xe3, 0x51, 0xe0, 0x34, 0x2e, 0x16, 0xb0, 0x87, 0x5f, 0x4b, 0xe4, 0xee, 0x1f, 0x26, 0x37,
	0x43, 0x3c, 0xba, 0x07, 0xed, 0x60, 0x3e, 0x9a, 0x21, 0xa8, 0xb1, 0x7d, 0xe8, 0x7e, 0x1a, 0xdd,
	0x4c, 0x0c, 0xac, 0xe3, 0xb5, 0x82, 0xbb, 0xb9, 0x4f, 0xa8, 0x81, 0x59, 0xb7, 0xbe, 0x87, 0xf1,
	0x1e, 0x2a, 0xb3, 0x61, 0x30, 0xf7, 0x11, 0x35, 0x51, 0x99, 0xcd, 0xe9, 0xf7, 0x5a, 0x8b, 0x16,
	0xfd, 0x7f, 0xfd, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x51, 0x25, 0x32, 0xc0, 0x00, 0x07,
	0x00, 0x00,
}
